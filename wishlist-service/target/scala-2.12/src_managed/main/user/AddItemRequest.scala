// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package user

@SerialVersionUID(0L)
final case class AddItemRequest(
    product: _root_.scala.Int = 0,
    user: _root_.scala.Int = 0
    ) extends scalapb.GeneratedMessage with scalapb.Message[AddItemRequest] with scalapb.lenses.Updatable[AddItemRequest] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = product
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(1, __value)
        }
      };
      
      {
        val __value = user
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(2, __value)
        }
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = product
        if (__v != 0) {
          _output__.writeInt32(1, __v)
        }
      };
      {
        val __v = user
        if (__v != 0) {
          _output__.writeInt32(2, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): _root_.user.AddItemRequest = {
      var __product = this.product
      var __user = this.user
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __product = _input__.readInt32()
          case 16 =>
            __user = _input__.readInt32()
          case tag => _input__.skipField(tag)
        }
      }
      _root_.user.AddItemRequest(
          product = __product,
          user = __user
      )
    }
    def withProduct(__v: _root_.scala.Int): AddItemRequest = copy(product = __v)
    def withUser(__v: _root_.scala.Int): AddItemRequest = copy(user = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = product
          if (__t != 0) __t else null
        }
        case 2 => {
          val __t = user
          if (__t != 0) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PInt(product)
        case 2 => _root_.scalapb.descriptors.PInt(user)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = _root_.user.AddItemRequest
}

object AddItemRequest extends scalapb.GeneratedMessageCompanion[user.AddItemRequest] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[user.AddItemRequest] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): user.AddItemRequest = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    user.AddItemRequest(
      __fieldsMap.getOrElse(__fields.get(0), 0).asInstanceOf[_root_.scala.Int],
      __fieldsMap.getOrElse(__fields.get(1), 0).asInstanceOf[_root_.scala.Int]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[user.AddItemRequest] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      user.AddItemRequest(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Int]).getOrElse(0)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = UserProto.javaDescriptor.getMessageTypes.get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = UserProto.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = user.AddItemRequest(
  )
  implicit class AddItemRequestLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, user.AddItemRequest]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, user.AddItemRequest](_l) {
    def product: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.product)((c_, f_) => c_.copy(product = f_))
    def user: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.user)((c_, f_) => c_.copy(user = f_))
  }
  final val PRODUCT_FIELD_NUMBER = 1
  final val USER_FIELD_NUMBER = 2
}
