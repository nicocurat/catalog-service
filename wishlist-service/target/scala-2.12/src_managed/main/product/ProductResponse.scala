// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package product

/** allows for Option[Product]
  */
@SerialVersionUID(0L)
final case class ProductResponse(
    product: _root_.scala.Option[_root_.product.Product] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[ProductResponse] with scalapb.lenses.Updatable[ProductResponse] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (product.isDefined) {
        val __value = product.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      product.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): _root_.product.ProductResponse = {
      var __product = this.product
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __product = Option(_root_.scalapb.LiteParser.readMessage(_input__, __product.getOrElse(_root_.product.Product.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      _root_.product.ProductResponse(
          product = __product
      )
    }
    def getProduct: _root_.product.Product = product.getOrElse(_root_.product.Product.defaultInstance)
    def clearProduct: ProductResponse = copy(product = None)
    def withProduct(__v: _root_.product.Product): ProductResponse = copy(product = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => product.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => product.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = _root_.product.ProductResponse
}

object ProductResponse extends scalapb.GeneratedMessageCompanion[product.ProductResponse] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[product.ProductResponse] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): product.ProductResponse = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    product.ProductResponse(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[_root_.scala.Option[_root_.product.Product]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[product.ProductResponse] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      product.ProductResponse(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[_root_.product.Product]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ProductProto.javaDescriptor.getMessageTypes.get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ProductProto.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = product.Product
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = product.ProductResponse(
  )
  implicit class ProductResponseLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, product.ProductResponse]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, product.ProductResponse](_l) {
    def product: _root_.scalapb.lenses.Lens[UpperPB, _root_.product.Product] = field(_.getProduct)((c_, f_) => c_.copy(product = Option(f_)))
    def optionalProduct: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.product.Product]] = field(_.product)((c_, f_) => c_.copy(product = f_))
  }
  final val PRODUCT_FIELD_NUMBER = 1
}
