// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package product

@SerialVersionUID(0L)
final case class ProductIds(
    productIds: _root_.scala.collection.Seq[_root_.scala.Int] = _root_.scala.collection.Seq.empty
    ) extends scalapb.GeneratedMessage with scalapb.Message[ProductIds] with scalapb.lenses.Updatable[ProductIds] {
    private[this] def productIdsSerializedSize = {
      if (__productIdsSerializedSizeField == 0) __productIdsSerializedSizeField = {
        var __s: _root_.scala.Int = 0
        productIds.foreach(__i => __s += _root_.com.google.protobuf.CodedOutputStream.computeInt32SizeNoTag(__i))
        __s
      }
      __productIdsSerializedSizeField
    }
    @transient private[this] var __productIdsSerializedSizeField: _root_.scala.Int = 0
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if(productIds.nonEmpty) {
        val __localsize = productIdsSerializedSize
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__localsize) + __localsize
      }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      if (productIds.nonEmpty) {
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(productIdsSerializedSize)
        productIds.foreach(_output__.writeInt32NoTag)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): product.ProductIds = {
      val __productIds = (_root_.scala.collection.immutable.Vector.newBuilder[_root_.scala.Int] ++= this.productIds)
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __productIds += _input__.readInt32()
          case 10 => {
            val length = _input__.readRawVarint32()
            val oldLimit = _input__.pushLimit(length)
            while (_input__.getBytesUntilLimit > 0) {
              __productIds += _input__.readInt32
            }
            _input__.popLimit(oldLimit)
          }
          case tag => _input__.skipField(tag)
        }
      }
      product.ProductIds(
          productIds = __productIds.result()
      )
    }
    def clearProductIds = copy(productIds = _root_.scala.collection.Seq.empty)
    def addProductIds(__vs: _root_.scala.Int*): ProductIds = addAllProductIds(__vs)
    def addAllProductIds(__vs: TraversableOnce[_root_.scala.Int]): ProductIds = copy(productIds = productIds ++ __vs)
    def withProductIds(__v: _root_.scala.collection.Seq[_root_.scala.Int]): ProductIds = copy(productIds = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => productIds
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PRepeated(productIds.map(_root_.scalapb.descriptors.PInt)(_root_.scala.collection.breakOut))
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = product.ProductIds
}

object ProductIds extends scalapb.GeneratedMessageCompanion[product.ProductIds] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[product.ProductIds] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): product.ProductIds = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    product.ProductIds(
      __fieldsMap.getOrElse(__fields.get(0), Nil).asInstanceOf[_root_.scala.collection.Seq[_root_.scala.Int]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[product.ProductIds] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      product.ProductIds(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.collection.Seq[_root_.scala.Int]]).getOrElse(_root_.scala.collection.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ProductProto.javaDescriptor.getMessageTypes.get(5)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ProductProto.scalaDescriptor.messages(5)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = product.ProductIds(
  )
  implicit class ProductIdsLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, product.ProductIds]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, product.ProductIds](_l) {
    def productIds: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[_root_.scala.Int]] = field(_.productIds)((c_, f_) => c_.copy(productIds = f_))
  }
  final val PRODUCTIDS_FIELD_NUMBER = 1
}
